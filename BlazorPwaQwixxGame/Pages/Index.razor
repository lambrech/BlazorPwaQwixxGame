@page "/"

@inject ResizeListener listener
@using System.Globalization
@implements IDisposable

<style>
    .vertical-wrap{
        display: flex;
        flex-direction: column;
        flex-wrap: nowrap;
        justify-content: center;
        align-items: stretch;
        align-content: stretch;
    }

    .horizontal-wrap{
        display: flex;
        flex-direction: row;
        flex-wrap: nowrap;
        justify-content: space-around;
        align-items: center;
        align-content: stretch;
    }

    .default-game-btn {
        border: none;
        font-weight: bold;
        font-size: 3vw;
        outline: none !important;
    }

    .number-btn {
        background: #FFFFFFDA;
    }

    .number-btn-disabled {
        background: #CCC;
        opacity: 0.9;
    }

    .default-label {
        font-size: 3vw;
        margin: 1%;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .score-container-label {
        border: 2px solid;
    }

</style>

<div class="vertical-wrap" style="height: 100%; width: 100%">
    @foreach (var gameRow in this.Game.GameRows)
{
        <div class="horizontal-wrap" style="height: 18%; background: @gameRow.Color">
            @foreach (var number in gameRow.RowNumbers)
            {
                <button class="default-game-btn @(number.CanBeToggled ? "number-btn" : "number-btn-disabled")" disabled="@(!number.CanBeToggled)" @onclick="number.Toggle"
                        style="width: @(this.Size)px; height: @(this.Size)px;  
                               border-radius: @((this.Size * 0.1).ToString(CultureInfo.InvariantCulture))px;
                               color: @(!number.CanBeToggled ? "Gray" : gameRow.Color)">@(number.Checked ? "X" : number.Number)</button>
            }
            
            <button class="default-game-btn number-btn" @onclick="gameRow.ToggleClose"
                    style="width: @(this.Size)px; height: @(this.Size)px; border-radius: @((this.Size * 0.5).ToString(CultureInfo.InvariantCulture))px; color: @gameRow.Color; position: relative">
                @if (gameRow.GotClosingPoint)
                {
                    <div>X</div>
                }
                else
                {
                    <img style="max-width: 50%; max-height: 50%; margin-bottom: 10%; opacity: @(gameRow.Closed ? "1" : "0.3")" src="images/Lock.png"/>
                }
            </button>
        </div>
            }
    
    <div class="horizontal-wrap" style="flex: auto;">
        @*Score*@
        <div class="horizontal-wrap" style="width: 50%; height: 100%; justify-content: flex-start">
            @foreach (var gameRow in this.Game.GameRows)
            {
                <label class="default-label score-container-label"
                       style="width: @((this.Size * 1.1).ToString(CultureInfo.InvariantCulture))px; height: @((this.Size * 0.8).ToString(CultureInfo.InvariantCulture))px; border-radius: @((this.Size * 0.15).ToString(CultureInfo.InvariantCulture))px; border-color: @gameRow.Color">@(this.Game.ScoreVisible ? gameRow.RowScore : "?")</label>
            }
            <label class="default-label">-</label>
            <label class="default-label score-container-label"
                   style="width: @((this.Size * 1.1).ToString(CultureInfo.InvariantCulture))px; height: @((this.Size * 0.8).ToString(CultureInfo.InvariantCulture))px; border-radius: @((this.Size * 0.15).ToString(CultureInfo.InvariantCulture))px; border-color: black">@(this.Game.ScoreVisible ? this.Game.TotalFailScore : "?")</label>
            <label class="default-label">=</label>
            <label class="default-label score-container-label"
                   style="width: @((this.Size * 1.2).ToString(CultureInfo.InvariantCulture))px; height: @((this.Size * 0.8).ToString(CultureInfo.InvariantCulture))px; border-radius: @((this.Size * 0.15).ToString(CultureInfo.InvariantCulture))px; border-color: black"
                   @onclick="this.Game.ToggleScoreVisibility">@(this.Game.ScoreVisible ? this.Game.TotalScore : "?")</label>
        </div>

        @*Game Options*@
        <div class="vertical-wrap" style="flex: auto; height: 100%; justify-content: space-evenly; align-items: center">
            <button class="btn btn-outline-secondary btn-sm" style="font-size: 2.5vw; border-radius: @((this.Size * 0.15).ToString(CultureInfo.InvariantCulture))px;" @onclick="@(() => { this.Game.OpenDialog(true); })">Fertig</button>
            <button class="btn btn-outline-secondary btn-sm" style="font-size: 2.5vw; border-radius: @((this.Size * 0.15).ToString(CultureInfo.InvariantCulture))px;" @onclick="@(() => { this.Game.OpenDialog(false); })">Zurücksetzen</button>
        </div>

        @*Fehlwürfe*@
        <div class="vertical-wrap" style="width: 20%; height: 100%; position: relative">
            <div style="position: absolute; width: 100%; display: flex; justify-content: center; margin-top: @((this.Size * 1.25).ToString(CultureInfo.InvariantCulture))px">
                <label style="margin: 0; font-size: 2vw;">Fehlwürfe</label>
            </div>
            <div class="horizontal-wrap" style="justify-content: center; z-index: 1">
                @foreach (var failRoll in this.Game.FailRolls)
                {
                    <label class="default-label score-container-label"
                           style="width: @((this.Size * 0.65).ToString(CultureInfo.InvariantCulture))px; height: @((this.Size * 0.8).ToString(CultureInfo.InvariantCulture))px; border-radius: @((this.Size * 0.1).ToString(CultureInfo.InvariantCulture))px; border-color: black; font-weight: 800"
                           @onclick="failRoll.ToggleChecked">@(failRoll.Checked ? "X" : "")</label>
                }
            </div>
        </div>
    </div>
</div>

@if (this.Game.ShowDialog)  
{  
   <div style="position: absolute; height: 100%; width: 100%; top: 0; left: 0; background: black; z-index: 10; opacity: 0.4"></div>

   <div class="horizontal-wrap" style="position: absolute; height: 100%; width: 100%; top: 0; left: 0; justify-content: center;">
       <div class="modal fade show d-block" style="max-width: 90%; position: unset; width: 70%; height: auto" tabindex="-1" role="dialog">  
        <div class="modal-dialog" style="max-width: none" role="document">  
            <div class="modal-content">  
                <div class="vertical-wrap" style="padding: 3%">
                    <div class="vertical-wrap" style="align-items: center;">
                        <div class="vertical-wrap" style="align-items: center; border: 2px solid; padding: 2%; border-radius: @((this.Size * 0.5).ToString(CultureInfo.InvariantCulture))px;">
                            <label style="font-weight: bold; font-size: 3vw; margin: 0">Deine Punktzahl:</label>
                            <label style="font-weight: bold; font-size: 5vw; margin: 0">@this.Game.TotalScore</label>
                        </div>
                    </div>
                    <div class="vertical-wrap" style="align-items: center; margin: 2%; margin-top: 3%">
                        <label style="font-weight: bold; font-size: 3vw; white-space: nowrap; margin: 2%;">Möchtest du alle Eingaben zurücksetzen?</label>
                        <div class="horizontal-wrap" style="width: 30%">
                            <button class="btn btn-outline-primary btn-sm" style="width: 40%; font-size: 2vw; border-radius: @((this.Size * 0.1).ToString(CultureInfo.InvariantCulture))px;" @onclick="@(() => { this.Game.CloseDialog(true); })">Ja</button>
                            <button class="btn btn-outline-primary btn-sm" style="width: 40%; font-size: 2vw; border-radius: @((this.Size * 0.1).ToString(CultureInfo.InvariantCulture))px;" @onclick="@(() => { this.Game.CloseDialog(false); })">Nein</button>
                        </div>
                    </div>
                </div>  
            </div>  
        </div>  
       </div>  
   </div>
   }

@code
{
    public int Size { get; set; }

    // We can also capture the browser's width / height if needed. We hold the value here.
    BrowserWindowSize browser = new ();

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            // Subscribe to the OnResized event. This will do work when the browser is resized.
            listener.OnResized += WindowResized;
            @*this.CalcSize();*@
        }
    }

    void IDisposable.Dispose()
    {
        // Always use IDisposable in your component to unsubscribe from the event.
        // Be a good citizen and leave things how you found them. 
        // This way event handlers aren't called when nobody is listening.
        listener.OnResized -= WindowResized;
    }

    // This method will be called when the window resizes.
    // It is ONLY called when the user stops dragging the window's edge. (It is already throttled to protect your app from perf. nightmares)
    async void WindowResized(object? _, BrowserWindowSize window)
    {
        // Get the browsers's width / height
        browser = window;
        this.CalcSize();
    }

    private void CalcSize()
    {
        var maxPartWidth = (this.browser.Width / 13) - 8;
        var maxPartHeight = (int)((this.browser.Height * 0.18) - 16);

        this.Size = maxPartWidth < maxPartHeight ? maxPartWidth : maxPartHeight;
        this.StateHasChanged();
    }
}